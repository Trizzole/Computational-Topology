---
title: "Computational Topology Part A"
subtitle: "Computational Geometric topology"
format: 
  revealjs:
    theme: [simple, quarto-assets/presentation-theme.scss]
    smaller: false
    scrollable: false
    show-slide-number: all
    toc: false
    toc-depth: 1
    preview-links: true
    slide-number: h.v
    multiplex: false
    embed-resources: true
    auto-animate: true
    footer: "Thomas Reinke"
author:
  - name: Thomas Reinke
    affiliation: 
      - name: Baylor University
        department: Statistical Science
        city: Waco
        state: TX
        country: US
        url: https://www.baylor.edu
    email: thomas_reinke1@baylor.edu
date: last-modified
logo: "quarto-assets/baylor.png"
license: "CC BY-NC"
copyright: 
  holder: Thomas Reinke
  year: 2025
editor: 
  markdown: 
    wrap: 72
---

```{r, setup}
#| include: false
#| message: false
library(knitr)
library(tidyverse)
library(conflicted)
conflict_prefer("select", "dplyr")
# set point size/type
# opts_knit$set(global.par = TRUE)
# par(pch = 20)
theme_set(theme_minimal())
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 100), tidy = FALSE, fig.align = 'center')
```

::: {.content-hidden}
$$
{{< include quarto-assets/_macros.tex >}}
$$
:::

  

## Resources

::: {.fragment}
-   [Wikipedia](https://en.wikipedia.org/wiki/Computational_topology)
:::

::: {.fragment}
-   [Edelsbrunner Course](https://courses.cs.duke.edu//fall06/cps296.1/)
:::

::::{.fragment}
-   [Hsien-Chih Chang Course & Reference](https://hcsoso.github.io/teaching/topology-f20/index.html)

    :::{.subsubtext}
    -   [Algorithms for Embedded Graphs](http://monge.univ-mlv.fr/~colinde/cours/all-algo-embedded-graphs.pdf)
    :::
    
    :::{.subsubtext}
    -   [Discrete Differential Geometry: An Applied Introduction](https://www.cs.cmu.edu/~kmcrane/Projects/DDG/paper.pdf)
    :::
    
    :::{.subsubtext}
    -   [Elementary Applied Topology](https://www.math.upenn.edu/~ghrist/notes.html)
    :::
    
    :::{.subsubtext}
    -   [Algebraic Topology](http://pi.math.cornell.edu/~hatcher/AT/ATpage.html)
    :::
    
    :::{.subsubtext} 
    -   [Optimization Algorithms for Planar Graphs](http://planarity.org/)
    :::
    
    :::{.subsubtext}
    -   [Computational Topology: Lecture Notes](http://monge.univ-mlv.fr/~demesma/FullLectureNotes.pdf)
    :::

::::

# I Graphs

:::{}
-   [Connected Components](#sec-ConnectedComponents)

-   [Curves in the Plane](#sec-CurvesPlane)

-   [Knots & Links](#sec-KnotsLinks)

-   [Planar Graphs](#sec-PlanarGraphs)
:::

# [I.1 Graphs - Connected Components]{.smallertitle} {#sec-ConnectedComponents} 

## Simple Graphs

:::{.defn .fragment}
- An abstract **graph** is a pair $G = (V, E)$ consisting of a set of
    *vertices*, $V$, and a set of *edges*, $E$, each pair of vertices
:::

:::{.fragment}
- Represent vertices as points/circles
:::

:::{.fragment}
- Edges as line segments/curves
:::

:::{.fragment}
- Edges allowed to intersect
:::

:::{.notes}
-   We can represent the vertices as points/circles and the edges with
    line segments or curves
-   Crossings of curves are allowed
:::

## Simple Graphs

::::: columns
::::{.column width="75%"}
:::{.fragment .defn}
- A **subgraph** of a graph $G = (V, E)$ is another graph $H = (U, F)$ formed from a subset of the vertices and edges of G
:::

:::{.fragment}
- $U \subseteq V$ and $F \subseteq E$
:::
::::

::::{.column width="25%"}
:::{.fragment}
```{dot}
//| fig-width: 2
//| fig-height: 2
//| fig-align: center
strict graph G {
  layout = circo
  node [width = .1, height = .1, shape = circle, label = "\N"]
  edge [penwidth = 1]
  A -- B, C, D, E;
  B -- C, D, E;
  C -- D, E;
  D -- E;
}
```
:::

:::{.fragment}
```{dot}
//| fig-width: 2
//| fig-height: 2
//| fig-align: center
strict graph G {
  layout = circo
  node [width = .1, height = .1, shape = circle, label = "\N"]
  edge [penwidth = 1]
  A -- C, D;
  B -- C, D;
}
```
:::
::::
:::::

:::{.notes}
- The vertex subset must include all endpoints of the edge subset, but may also include additional vertices
- A spanning subgraph is one that includes all vertices of the graph; an induced subgraph is one that includes all the edges whose endpoints belong to the vertex subset.
:::


## Simple Graphs

:::{.defn .fragment}
- A graph is **simple** if the edge set is a subset of the set of
    unordered pairs, $E \subseteq V \times V$, which means that no two
    edges connect the same two vertices and no edge joins a vertex to
    itself
:::

:::{.fragment}
- For $n$ vertices, there will be $m \leq {n \choose 2}$ edges
:::

::::{.fragment}
- $K_n$ denotes a *complete graph*

    - [Each pair of vertices has an edge]{.subtext .fragment}
    
::::

:::{.notes}
-   For $n = \text{card } V$ vertices, the number of edges is
    $m = \text{card } E \leq {n \choose 2}$
-   Every simple graph with $n$ vertices is a subgraph of the *complete graph*, $K_n$, that contains an edge for every pair of vertices
:::

## Simple Graphs

::::: columns
:::: {.column width="80%"}
:::{.fragment}
-   The complete graph $K_5$
:::
:::{.fragment}
- 10 edges, 5 crossings
:::

:::{.fragment}
- Red edges form a *spanning tree*
:::

:::{.notes}
-   It has ten edges which form five crossings if drawn as sides and diagonals of a convex pentagon
-   The four red edges connect the same five vertices and form a spanning tree of the complete graph
:::
::::

:::: {.column width="20%" .fragment}
```{dot}
//| fig-width: 2
//| fig-height: 2
//| fig-align: center
strict graph G {
  layout = neato
  node [width = .1, height = .1, shape = circle, label = ""]
  A -- B, C, D, E [penwidth = 1];
  B -- C, D, E [penwidth = 1];
  C -- D, E [penwidth = 1];
  D -- E [penwidth = 1];
  A -- B, C, D [penwidth = 3, color = "red"];
  D -- E [penwidth = 3, color = "red"];
}
```
::::
:::::

## Simple Graphs

::::: columns
:::: {.column width="80%"}

:::{.fragment .defn}
- A **path** between vertices $u$ and $v$ can be described by a sequence of vertices, $u = u_0, u_1, \ldots , u_k = v$, with and edge between $u_i$ and $u_{i + 1}$ for each $0 \leq i \leq k - 1$
:::

:::{.fragment .subtext}
-   The *length* of this path is its number of edges, $k$
:::

:::{.fragment .subtext}
-   Path is *simple* if the vertices in the sequence are distinct, so $u_i \neq u_j$ whenever $i \neq j$
:::

:::{.notes}
-   Vertices can repeat, so the path can backtrack or cross itself
:::

::::

:::: {.column width="20%"}
```{dot}
//| fig-width: 2
//| fig-height: 2
//| fig-align: center
strict graph G {
  layout = neato
  node [width = .1, height = .1, shape = circle, label = ""]
  A -- B, C, D, E [penwidth = 1];
  B -- C, D, E [penwidth = 1];
  C -- D, E [penwidth = 1];
  D -- E [penwidth = 1];
  A -- B, C, D [penwidth = 3, color = "red"];
  D -- E [penwidth = 3, color = "red"];
}
```
::::

:::::

## Simple Graphs

:::{.defn .fragment}
-   A simple graph is **connected** if $\exists$ a path between every pair
    of vertices
:::

:::{.fragment .defn}
- A **tree** is any graph which any two vertices are connected by exactly one path
:::

:::{.fragment .subtext}
-   The smallest connected graphs are *trees*
:::

:::{.fragment .subtext}
-   Removing any edge disconnects the tree
:::

:::{.notes}
-   A *(connected) component* is a maximal subgraph that is connected
-   The smallest connected graphs are the *trees*, which are
    characterized by having a unique simple path between every pair of
    vertices
:::

## Simple Graphs

::::: columns
::::{.column width="50%"}
```{dot}
//| fig-width: 4
//| fig-height: 4
//| fig-align: center
strict graph G {
  layout = dot
  node [width = .1, height = .1, shape = circle, label = "\N"]
  1 -- 2, 3;
  2 -- 4, 5;
  3 -- 6, 7;
}
```
::::

::::{.column width="50%" .fragment}
```{dot}
//| fig-width: 4
//| fig-height: 4
//| fig-align: center
strict graph H {
  layout = dot
  node [width = .1, height = .1, shape = circle, label = "\N"]
  1 -- 2;
  2 -- 4, 5;
  3 -- 6, 7;
}
```
::::
:::::

## Simple Graphs 

:::{.fragment .defn}
-   A **spanning tree** of $G = (V, E)$ is a tree $T=(V, U)$ that includes all of the vertices of $G$
:::

:::{.fragment}
- $G$ must be connected
:::

:::{.fragment}
- $G$ is connected iff it has a spanning tree
:::

:::{.notes}
- $U \subseteq  E$
-   It has the same vertex set as the graph and uses a minimal set of
    edges necessary to be connected
-   Multiple spanning trees may exists for a $G$
-   An alternative characterization of a connected graph can be based on
    the impossibility to cut it in two
:::

## Simple Graphs

:::{.fragment .defn}
-  A **separation** is a non-trivial partition of the vertices,
    $V = U \, \dot \cup \, W$ with $U, W \neq \emptyset$, such that no
    edge connects a vertex in $U$ with a vertex in $W$
:::

:::{.fragment}
-   A simple graph is *connected* if it has no separation
:::

## Topological Spaces

:::{.fragment .defn}
A **topology** on a point set $\mathbb{X}$ is a collection $\mathcal{U}$
of subsets of $\mathbb{X}$, called *open sets*, such that
::: 

:::{.fragment .subtext}
1.  $\mathbb{X}$ is open and the empty set $\emptyset$ is open
:::

:::{.fragment .subtext}
2. if $U_1$ and $U_2$ are open, then $U_1 \cap U_2$ is open
:::

:::{.fragment .subtext}
3. if $U_i$ is open $\forall i$ in some possibly infinite, possibly
     uncountable set, then $\bigcup\limits_{i\in I} U_i$ is open
:::

:::{.fragment .subsubtext}
$I$ is an indexing set
:::

## Topological Spaces

:::{.fragment}
-   The pair $(\mathbb{X}, \mathcal{U})$ is a *topological space*
:::

:::{.fragment}
-   Usually $\mathcal{U}$ is understood, we refer to $\mathbb{X}$ as
    a topological space
:::

:::{.fragment}
- Condition 2 becomes finite intersection

$$
\bigcap_{i = 1}^n U_i \in \mathcal U
$$
:::


:::{.notes}
-   Since we can repeat the pairwise intersection, condition 2 is
    equivalent to requiring that common intersections of finitely many
    open sets are open
:::

## Topological Spaces

:::{.fragment .defn}
-  A **basis** of a topology on a point set $\mathbb{X}$ is a collection
    $\mathcal{B}$ of subsets of $\mathbb{X}$, called *basis elements*,
    such that
:::

:::{.fragment .subtext}
- each $x \in \mathbb{X}$ is contained in at least one
    $B \in \mathcal{B}$ 
:::

:::{.fragment .subtext}
- $x \in B_1 \cap B_2 \implies \exists \, x \in B_3 \subseteq B_1 \cap B_2$
:::

:::{.fragment .subsubtext}
- The $\mathcal{U}$ *generated* by $\mathcal{B}$ is all sets $U \subseteq \mathbb{X}$ which $x \in U \implies \exists$ a basis element $x \in B \subseteq U$
:::

:::{.fragment .subsubtext}

- $\mathcal{T} = \left\{ \bigcup_{j \in J} \bigcap_{i \in I_j} B_i \mid B_i \in \mathcal{B} \right\}$

- $I_j \text{ is finite}, J \text{ is arbitrary}$

:::

:::{.notes}
-   The topology $\mathcal{U}$ *generated* by $\mathcal{B}$ consists of
    all sets $U \subseteq \mathbb{X}$ for which $x \in U$ implies there
    is a basis element $x \in B \subseteq U$
-   This topology can be constructed explicitly by taking all possible
    unions of all possible finite intersections of basis sets
:::

## Topological Spaces

### Why only finite intersection?

:::{.fragment}
- Consider $\mathbb{X} = \mathbb{R}$
:::

:::{.fragment}
- $\mathcal{B}$ be the collection of open intervals
:::

:::{.fragment}
- This gives usual topology of the real line
:::

:::{.notes}
- Consider the real line, $\mathbb{X} = \mathbb{R}$, and let
$\mathcal{B}$ be the collection of open intervals
- This gives us the usual topology of the real line
:::

## Topological Spaces

### Why only finite intersection?

:::{.fragment}
- Consider the intervals $\mathscr I = \{ (-1/k, +1/k) | k \in \mathbb{Z}^{+} \}$
:::

:::{.fragment}

$$
\bigcap_{i \in \mathbb Z^+} \mathscr I_i = \{0\}
$$
:::

:::{.fragment}
- Since $\{0\}$ is not open, we need to restrict to finite intersection
:::



:::{.notes}
- Note that the intersection of intervals $(-1/k, +1/k)$, for infinitely many integers $k \geq 1$, is the point, 0
- This is not an open set which illustrates the need for restriction on
finite intersections
:::

## Topological Spaces

:::{.fragment}
- Consider $\mathbb{Y} \subseteq \mathbb{X}$
:::

:::{.fragment}
- Let $\mathcal U$ be topology on $\mathbb X$
:::

:::{.fragment .defn}
- The **subspace topology** of $\mathbb{Y}$ is the collection $\mathbb{Y} \cap U$ for $U \in \mathcal{U}$
:::

:::{.notes}
- Often, we have sets inside of sets, $\mathbb{Y} \subseteq \mathbb{X}$,
which we can borrow the topology of the latter for the former
- If $\mathcal{U}$ is a topology of $\mathbb{X}$ then the collection of sets
$\mathbb{Y} \cap U$, for $U \in \mathcal{U}$, is the *subspace topology*
of $\mathbb{Y}$
:::

## Topological Spaces

### Subspace example

:::{.fragment}
- Consider $[0, 1] \subseteq \mathbb{R}$
:::

:::{.fragment}
- Open intervals form basis for topology of $\mathbb R$
:::

:::{.fragment}
- Intersections $(a, b) \cap [0, 1]$ form basis of subspace topology of $[0,1]$
:::

:::{.fragment .subtext}
- Note: $(1/2, 1]$ open in subspace but not original topology
:::

:::{.notes}
- Consider the closed interval $[0, 1] \subseteq \mathbb{R}$

- We have seen that the open intervals form the basis for a topology of the real line

- The intersections of open intervals with $[0, 1]$ form the basis of the subspace topology of the closed interval

- Note that the interval $(1/2, 1]$ is considered an open
set in $[0, 1]$, but isn’t open when considered as a set in
$\mathbb {R}$
:::

## Continuity, Paths, and Connectedness

:::{.fragment .defn}
- A function from one topological space to another is **continuous** if the preimage of every set is open
:::

:::{.fragment}
- Derived from concept of continuity in calculus
:::

## Continuity, Paths, and Connectedness

:::{.fragment}
- Let $f: \mathbb{R} \rightarrow \mathbb{R}$
:::

:::{.fragment}
- $f(x) = \begin{cases} 0 & x \in (-\infty, 0] \\ 1 & x \in (0, \infty) \end{cases}$
:::

:::{.fragment}
- $\forall \, 0 < \epsilon < 1, \, (-\epsilon, \epsilon)$ is open
:::

:::{.fragment}
- $f^{-1}((-\epsilon, \epsilon))$ is not
:::

:::{.notes}
- Consider a function $f: \mathbb{R} \rightarrow \mathbb{R}$ that maps $(-\infty, 0]$ to $0$ and $(0, \infty)$ to $1$ is not continuous since
$\forall \, 0 < \epsilon < 1$, $(-\epsilon, \epsilon)$ is open, but
$f^{-1}((-\epsilon, \epsilon))$ is not

- $f^{-1}((-\epsilon, \epsilon)) = \{x \in \mathbb R | f(x) \in (-\epsilon, \epsilon) \}$
:::

## Continuity, Paths, and Connectedness

:::{.fragment .defn}
- A **path** is a continuous function from the unit interval,
$\gamma : [0, 1] \rightarrow \mathbb{X}$
:::

:::{.fragment .subtext}
- It *connects* the point $\gamma(0)$ to the point $\gamma(1)$ in $\mathbb{X}$
:::

:::{.fragment .subtext}
- Similar to paths in graphs, self-intersections allowed, $s \neq t$ where $\gamma(s) = \gamma(t)$
:::

:::{.fragment .subtext}
- If no self intersections, then $\gamma$ is injective, and *simple*
:::

## Continuity, Paths, and Connectedness

:::{.fragment}
- Adapt  definition to connectedness of topological
spaces
:::

:::{.fragment .defn}
- A topological space is **path-connected** if every pair of points is
    connected by a path
:::

:::{.notes}
- There is a counterpart of our second definition of connectedness

- We formulate it with open sets and there is an equivalent formulation from
*closed sets*, which are by definition, complements of open sets
:::

## Continuity, Paths, and Connectedness

:::{.fragment .defn}
- A **separation** of a topological space $\mathbb{X}$ is a partition
    $\mathbb{X} = U \, \dot \cup \, W$ into two non-empty, open subsets.
:::

:::{.fragment .defn}
- A topological space is **connected** if there exists no separation.
:::

:::{.fragment .subtext}
- Connectedness strictly weaker than path-connectedness
:::

:::{.fragment .subtext}
- For example the [comb](https://en.wikipedia.org/wiki/Comb_space) with a single tooth deleted is connected, but not path-connected
:::

:::{.notes}
- Connectedness is strictly weaker than path-connectedness, although for
most spaces we will encounter they are the same
:::

## {.center}

### Back to graphs

### Considering algorithmic question of connectedness

### Based on maintaining a disjoint set system

## Disjoint Set Systems

### Graphs & algorithmically determining connectedness

:::{.fragment}
- Name vertices $1, \ldots, n$
:::

:::{.fragment}
- Store *components* that are subsets of $[n] = \{1, 2,\ldots, n\}$
:::

:::{.fragment .defn}
- A **component** of an graph is a connected subgraph that is not part of any larger connected subgraph.
:::

:::{.notes}
- We will use the integers $1$ to $n$ as the names of vertices, storing each component of the graph as a subset of $[n] = \{1, 2,\ldots, n\}$
-   A *(connected) component* is a maximal subgraph that is connected
:::

## Disjoint Set Systems

### Graphs & algorithmically determining connectedness

:::{.fragment}
- Add one edge at a time
:::

:::{.fragment}
- The graph is connected iff at the end, there is only one set left, $[n]$
:::

:::{.notes}
- Adding edges one at a time and maintaining the systems of sets representing the components, we find that the graph is connected iff at the end, there is only one set left, $[n]$
:::


## Disjoint Set Systems

### Graphs & algorithmically determining connectedness

:::{.fragment}
- 2 operations
:::

:::{.fragment .subtext}
1. FIND($i$): return name of set that contains $i$
:::

:::{.fragment .subtext}
2. UNION($i, j$): assuming $i$ and $j$ in different sets in system, replace two sets by their union
:::

:::{.notes}
- Formulated as an abstract data type, we have two operations
manipulating the system:
1. FIND($i$): return the name of the set that contains $i$.
2. UNION($i,j$): assuming $i$ and $j$ belong to different sets in the system, replace the two sets by their union.

:::

## Disjoint Set Systems

### Graphs & algorithmically determining connectedness

:::{.fragment}
- `find` tests whether $i$ and $j$ belong to different sets
:::

:::{.fragment}
- Successful `union` reduces the number of sets in system by one
:::

## Disjoint Set Systems

### Graphs & algorithmically determining connectedness

:::{.fragment}
- Starting with $n$ singleton sets, it takes $n-1$ `union`s to get a single set
:::

:::{.fragment}
- Since trees connecting $n$ vertices can be generated, every tree with $n$ vertices has $m = n - 1$ edges
:::

## Disjoint Set Systems

### Graphs & algorithmically determining connectedness

:::{.fragment}
- Data structure implementation stores each set as tree
embedded in a linear array, $V[1..n]$
:::

:::{.fragment}
- Each node in tree equipped with pointer to its *parent*, except for *root*
:::

## Disjoint Set Systems

### Graphs & algorithmically determining connectedness

:::{.fragment}
- Implement `find` by traversing tree upward until root reached
:::

:::{.fragment}
- Report root as name of set
:::

:::{.notes}
-  Who is the parent of whom isn't important so long as the vertices are connected in a single tree
:::

## Disjoint Set System

#### Two trees representing two disjoint sets

```{dot}
//| fig-width: 6
//| fig-height: 4
//| fig-align: center
graph G {
  layout = dot
  node [fixedsize = true, width = .25, height = .25, shape = circle, style = filled, color = "pink"]
  subgraph tree1 {
  6 -- 7, 16;
  7 -- 13, 12;
  12 -- 11, 9;
  11 -- 1;
  1 -- 8;
  9 -- 10;
  }

  subgraph tree2 {
  15 -- 3;
  3 -- 14, 2;
  2 -- 4;
  4 -- 5;
  }
}
```

## Disjoint Set Systems

#### Storing the two trees in a linear array using an arbitrary ordering of the nodes

```{dot}
//| fig-width: 5
//| fig-height: 5
//| fig-align: center
digraph BitConnections {
    rankdir=TB;
    node [fixedsize = true, shape=box, width=0.375, height=0.375, style=filled, fillcolor=lightpink, color=black, fontcolor=black, fixedsize=true];
    nodesep=0.1;
    ranksep=1.5;

    // Nodes
    1 [label="1"];
    2 [label="2"];
    3 [label="3"];
    4 [label="4"];
    5 [label="5"];
    6 [label="6", fillcolor=white];
    7 [label="7"];
    8 [label="8"];
    9 [label="9"];
    10 [label="10"];
    11 [label="11"];
    12 [label="12"];
    13 [label="13"];
    14 [label="14"];
    15 [label="15", fillcolor=white];
    16 [label="16"];

    // Arrange nodes in horizontal order
    { rank=same; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; }

    // Connections
    1 -> 2 [color=transparent];
    2 -> 3 [color=transparent];
    3 -> 4 [color=transparent];
    4 -> 5 [color=transparent];
    5 -> 6 [color=transparent];
    6 -> 7 [color=transparent];
    7 -> 8 [color=transparent];
    8 -> 9 [color=transparent];
    9 -> 10 [color=transparent];
    10 -> 11 [color=transparent];
    11 -> 12 [color=transparent];
    12 -> 13 [color=transparent];
    13 -> 14 [color=transparent];
    14 -> 15 [color=transparent];
    15 -> 16 [color=transparent];

    // Loops and cross-links
    8:n -> 1 [arrowhead = empty, arrowsize = 1];
    1:s -> 11 [arrowhead = empty, arrowsize = 1];
    11:n -> 12 [arrowhead = empty, arrowsize = 1];
    10:n -> 9 [arrowhead = empty, arrowsize = 1];
    9:s -> 12 [arrowhead = empty, arrowsize = 1];
    12:n -> 7 [arrowhead = empty, arrowsize = 1];
    13:n -> 7 [arrowhead = empty, arrowsize = 1];
    7:s -> 6 [arrowhead = empty, arrowsize = 1];
    16:s -> 6 [arrowhead = empty, arrowsize = 1];
    5:n -> 4 [arrowhead = empty, arrowsize = 1];
    4:s -> 2 [arrowhead = empty, arrowsize = 1];
    2:n -> 3 [arrowhead = empty, arrowsize = 1];
    14:s -> 3 [arrowhead = empty, arrowsize = 1];
    3:n -> 15 [arrowhead = empty, arrowsize = 1];
}
```

## Disjoint Set Systems

:::{.fragment}
- If $i$ is not the root, then we find it recursively and finally return it 
:::

:::{.fragment}
- Otherwise, $i$ is returned as the root
:::

:::{.fragment}
```         
int FIND(i)
    if V[i].parent ≠ null then return Find(V[i].parent)
                          else return i
    endif
```
:::


## Disjoint Set Systems

:::{.fragment}
- Implement `union` by linking one root to the other
:::

:::{.fragment}
```         
void UNION(i, j)
    x = FIND(i); y = FIND(j);
    if x ≠ y then V[x].parent = y endif
```
:::

:::{.fragment}
- Make sure the two sets are different, then assign one root as the
parent of the other
:::

## Improving the running time

:::{.fragment}
- Not a very efficient method, especially for long paths that may
be traversed repeatedly
:::

:::{.fragment}
- Prevent by always linking smaller tree to larger one
:::

:::{.fragment}
```         
void UNION(i,j)
    x = FIND(i); y = FIND(j);
    if x ≠ y then
      if V[x].size > V[y].size then x ↔ y endif;
      V[x].parent = y
    endif
```
:::

## Improving the running time

:::{.fragment}
- The size of the subtree grows by at least a factor of two each
time we pass the parent
:::

:::{.fragment}
- So tree of $k$ nodes cannot have paths longer than $\log_2 k$ edges
:::

:::{.fragment}
- To improve the efficiency more, compress paths whenever traversed
:::

:::{.fragment}
- Assume that roots are identified by pointing to themselves
:::

## Improving the running time

:::{.fragment}
```         
int FIND(i)
    if V[i].parent ≠ i then
        return V[i].parent = FIND(V[i].parent)
    endif;
    return i
```
:::

:::{.fragment}
- If $i$ not root:

    [- `FIND` recursively finds root,]{.fragment}
    
    [- makes it the parent of $i$]{.fragment}
    
    [- reports the root]{.fragment}
    
    [- exits]{.fragment}

[- Otherwise, `FIND` reports $i$ as the root and exits]{.fragment}
:::


:::{.notes}
- If $i$ is not the root, then the function recursively finds the root,
makes it the parent of $i$, reports the root, and exits; otherwise, the
function reports $i$ as the root and exits

- In analyzing the algorithm, we are interested in the running-time for
executing a sequence of $m$ union and find operations; finding tight
bounds is a difficult problem
:::

## Improving the running time

:::{.fragment}
- For $n$ vertices, running-time $\leq O(m\alpha (n))$
:::

:::{.fragment .subtext}
- $\alpha(n)$ is the slow growing inverse of the [Ackermann function](https://en.wikipedia.org/wiki/Ackermann_function)
:::


:::{.fragment .subtext}
- $m$ is number of `FIND` & `UNION` operations
:::

:::{.fragment .subtext}
- Eventually $\alpha(n) \rightarrow \infty$, but to reach even beyond five, need astronomically large number of vertices, more than electrons in the universe
:::

:::{.fragment .subtext}
- For practical purposes, algorithm takes constant average time per operation, but theoretically not true
:::


:::{.notes}
- For $n$ vertices, the running-time is never more than $O(m\alpha (n))$, where $\alpha(n)$ is the slow growing inverse of the [Ackermann function](https://en.wikipedia.org/wiki/Ackermann_function)

- Eventually, $\alpha(n)$ goes to infinity, but to reach even beyond five, we need an astronomically large number of vertices, larger than electrons in the universe

- For practical purposes, the algorithm takes constant average time per operation, but theoretically not true
:::

# [I.2 Graphs - Curves in the Plane]{.smallertitle} {#sec-CurvesPlane}

# [I.3 Graphs - Knots & Links]{.smallertitle} {#sec-KnotsLinks}


# [I.4 Graphs - Planar Graphs]{.smallertitle} {#sec-PlanarGraphs}

# II Surfaces

- 2-dimensional Manifolds

- Searching a Triangulation

- Self-intersections

- Surface Simplification

# [II.1 Surfaces - 2-dimensional Manifolds]{.smallertitle}

# [II.2 Surfaces - Searching a Triangulation]{.smallertitle}

# [II.3 Surfaces - Self-intersections]{.smallertitle}

# [II.4 Surfaces - Surface Simplification]{.smallertitle}

# III Complexes

- Simplical Complexes

- Convex Set Systems

- Delaunay Complexes

- Alpha Complexes

# [III.1 Complexes - Simplical Complexes]{.smallertitle}

# [III.2 Complexes - Convex Set Systems]{.smallertitle}

# [III.3 Complexes - Delaunay Complexes]{.smallertitle}

# [III.4 Complexes - Alpha Complexes]{.smallertitle}
