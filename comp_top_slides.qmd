---
title: "Computational Topology Part A"
subtitle: "Computational Geometric topology"
format: 
  revealjs:
    theme: [simple, quarto-assets/presentation-theme.scss]
    smaller: false
    scrollable: false
    show-slide-number: all
    toc: true
    toc-depth: 1
    preview-links: true
    slide-number: h.v
    multiplex: true
    embed-resources: true
    auto-animate: true
    footer: "Thomas Reinke"
author:
  - name: Thomas Reinke
    affiliation: 
      - name: Baylor University
        department: Statistical Science
        city: Waco
        state: TX
        country: US
        url: https://www.baylor.edu
    email: thomas_reinke1@baylor.edu
date: last-modified
logo: "quarto-assets/baylor.png"
license: "CC BY-NC"
copyright: 
  holder: Thomas Reinke
  year: 2025
editor: 
  markdown: 
    wrap: 72
---

```{r, setup}
#| include: false
#| message: false
library(knitr)
library(tidyverse)
library(conflicted)
conflict_prefer("select", "dplyr")
# set point size/type
# opts_knit$set(global.par = TRUE)
# par(pch = 20)
theme_set(theme_minimal())
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 100), tidy = FALSE, fig.align = 'center')
```

::: {.content-hidden}
$$
{{< include quarto-assets/_macros.tex >}}
$$
:::

  

## Resources

-   [Wikipedia](https://en.wikipedia.org/wiki/Computational_topology)

-   [Edelsbrunner Course](https://courses.cs.duke.edu//fall06/cps296.1/)

-   [Hsien-Chih Chang Course &
    Reference](https://hcsoso.github.io/teaching/topology-f20/index.html)

    -   [Algorithms for Embedded
        Graphs](http://monge.univ-mlv.fr/~colinde/cours/all-algo-embedded-graphs.pdf)

    -   [Discrete Differential Geometry: An Applied
        Introduction](https://www.cs.cmu.edu/~kmcrane/Projects/DDG/paper.pdf)

    -   [Elementary Applied
        Topology](https://www.math.upenn.edu/~ghrist/notes.html)

    -   [Algebraic
        Topology](http://pi.math.cornell.edu/~hatcher/AT/ATpage.html)

    -   [Optimization Algorithms for Planar
        Graphs](http://planarity.org/)

    -   [Computational Topology: Lecture
        Notes](http://monge.univ-mlv.fr/~demesma/FullLectureNotes.pdf)

# I Graphs

-   [Connected Components](#sec-ConnectedComponents)

-   [Curves in the Plane](#sec-CurvesPlane)

-   [Knots & Links](#sec-KnotsLinks)

-   [Planar Graphs](#sec-PlanarGraphs)

# I.1 Graphs - Connected Components {#sec-ConnectedComponents}

## Simple Graphs

Graph

:   An abstract *graph* is a pair $G = (V, E)$ consisting of a set of
    *vertices*, $V$, and a set of *edges*, $E$, each pair of vertices

-   We can represent the vertices as points/circles and the edges with
    line segments or curves

-   Crossings of curves are allowed

Simple Graph

:   A graph is *simple* if the edge set is a subset of the set of
    unordered pairs, $E \subseteq {V\choose 2}$, which means that no two
    edges connect the same two vertices and no edge joins a vertex to
    itself

-   For $n = \text{card } V$ vertices, the number of edges is
    $m = \text{card } E \leq {n \choose 2}$

-   Every simple graph with $n$ vertices is a subgraph of the *complete
    graph*, $K_n$, that contains an edge for every pair of vertices

## Simple Graphs

:::: columns
::: {.column width="70%"}
-   The complete graph with five vertices, $K_5$

-   It has ten edges which form five crossings if drawn as sides and
    diagonals of a convex pentagon

-   The four thick edges connect the same five vertices and form a
    spanning tree of the complete graph

-   In a simple graph, a *path* between vertices $u$ and $v$ can be
    described by a sequence of vertices,
    $u = u_0, u_1, \ldots , u_k = v$, with and edge between $u_i$ and
    $u_{i + 1}$ for each $0 \leq i \leq k - 1$

-   The *length* of this path is its number of edges, $k$

-   Vertices can repeat, so the path can backtrack or cross itself

-   The path is *simple* if the vertices in the sequence are distinct,
    so $u_i \neq u_j$ whenever $i \neq j$
    
Connectedness

:   A simple graph is *connected* if $\exists$ a path between every pair
    of vertices

-   A *(connected) component* is a maximal subgraph that is connected

-   The smallest connected graphs are the *trees*, which are
    characterized by having a unique simple path between every pair of
    vertices

-   Removing any one edge disconnects the tree
:::

::: {.column width="30%"}
```{dot}
//| fig-width: 2
//| fig-height: 2
//| fig-align: center
strict graph G {
  layout = neato
  node [width = .1, height = .1, shape = circle, label = ""]
  A -- B, C, D, E [penwidth = 1];
  B -- C, D, E [penwidth = 1];
  C -- D, E [penwidth = 1];
  D -- E [penwidth = 1];
  A -- B, C, D [penwidth = 3];
  D -- E [penwidth = 3];
}
```
:::

<!-- ::: aside -->
<!-- spanning tree: a maximal acyclic set of edges or as a tree that contains -->
<!-- every vertex -->
<!-- ::: -->
::::

## Simple Graphs

Spanning tree

:   A *spanning tree* of $G = (V, E)$ is a tree $(V, T)$ with
    $T \subseteq  E$

-   It has the same vertex set as the graph and uses a minimal set of
    edges necessary to be connected

-   This requires that the graph is connected to begin with

-   A graph is connected iff it has a spanning tree

-   An alternative characterization of a connected graph can be based on
    the impossibility to cut it in two

Separation

:   A *separation* is a non-trivial partition of the vertices,
    $V = U \, \dot \cup \, W$ with $U, W \neq \emptyset$, such that no
    edge connects a vertex in $U$ with a vertex in $W$

-   A simple graph is *connected* if it has no separation

## Topological Spaces

Topology

: A *topology* on a point set $\mathbb{X}$ is a collection $\mathcal{U}$
of subsets of $\mathbb{X}$, called *open sets*, such that

1.  $\mathbb{X}$ is open and the empty set $\emptyset$ is open

2. if $U_1$ and $U_2$ are open, then $U_1 \cap U_2$ is open

3. if $U_i$ is open $\forall i$ in some possibly infinite, possibly
     uncountable, index set, then $\bigcup\limits_{i = 1}^n U_i$ is open

-   The pair $(\mathbb{X}, \mathcal{U})$ is a *topological space*

-   Usually $\mathcal{U}$ is understood and we refer to $\mathbb{X}$ as
    a topological space

-   Since we can repeat the pairwise intersection, condition 2 is
    equivalent to requiring that common intersections of finitely many
    open sets are open

-   A *basis* of a topology on a point set $\mathbb{X}$ is a collection
    $\mathcal{B}$ of subsets of $\mathbb{X}$, called *basis elements*,
    such that each $x \in \mathbb{X}$ is contained in at least one
    $B \in \mathcal{B}$ and $x \in B_1 \cap B_2$ implies there is a
    third basis element with $x \in B_3 \subseteq B_1 \cap B_2$

-   The topology $\mathcal{U}$ *generated* by $\mathcal{B}$ consists of
    all sets $U \subseteq \mathbb{X}$ for which $x \in U$ implies there
    is a basis element $x \in B \subseteq U$

-   This topology can be constructed explicitly by taking all possible
    unions of all possible finite intersections of basis sets
    
## Topological Spaces

### Why only finite intersection?

- Consider the real line, $\mathbb{X} = \mathbb{R}$, and let
$\mathcal{B}$ be the collection of open intervals

- This gives us the usual topology of the real line

- Note that the intersection of intervals $(-1/k, +1/k)$, for infinitely many integers $k \geq 1$, is the point, 0

- This is not an open set which illustrates the need for restriction on
finite intersections

- Often, we have sets inside of sets, $\mathbb{Y} \subseteq \mathbb{X}$,
which we can borrow the topology of the latter for the former

- If $\mathcal{U}$ is a topology of $\mathbb{X}$ then the collection of sets
$\mathbb{Y} \cap U$, for $U \in \mathcal{U}$, is the *subspace topology*
of $\mathbb{Y}$

### Subspace example

- Consider the closed interval $[0, 1] \subseteq \mathbb{R}$

- We have seen that the open intervals form the basis for a topology of the real line

- The intersections of open intervals with $[0, 1]$ form the basis of the subspace topology of the closed interval

- Note that the interval $(1/2, 1]$ is considered an open
set in $[0, 1]$, but isnâ€™t open when considered as a set in
$\mathbb {R}$

## Continuity, Paths, and Connectedness

- A function from one topological space to another is *continuous* if the preimage of every set is open

- This is derived from the same concept of continuity in calculus

- Consider a function $f: \mathbb{R} \rightarrow \mathbb{R}$ that maps $(-\infty, 0]$ to $0$ and $(0, \infty)$ to $1$ is not continuous since
$\forall \, 0 < \epsilon < 1$, $(-\epsilon, \epsilon)$ is open, but
$f^{-1}((-\epsilon, \epsilon))$ is not

Path

: A *path* is a continuous function from the unit interval,
$\gamma : [0, 1] \rightarrow \mathbb{X}$

- It *connects* the point $\gamma(0)$ to the point $\gamma(1)$ in $\mathbb{X}$

- Similar to paths in graphs, we allows for self-intersections, that is, values $s \neq t$ in the unit interval for which $\gamma(s) = \gamma(t)$

- If there are no self intersections, then the function is injective and the path is *simple*

:::{.notes}
We can adapt this definition to connectedness of topological
spaces
:::

## Continuity, Paths, and Connectedness

Path Connected

: A topological space is *path-connected* if every pair of points is
    connected by a path

- There is a counterpart of our second definition of connectedness

- We formulate it with open sets and there is an equivalent formulation from
*closed sets*, which are by definition, complements of open sets

A *separation* of a topological space $\mathbb{X}$ is a partition
    $\mathbb{X} = U \, \dot \cup \, W$ into two non-empty, open subsets.
    A topological space is *connected* if there exists no separation.

- Connectedness is strictly weaker than path-connectedness, although for
most spaces we will encounter they are the same

- For example the [comb](https://en.wikipedia.org/wiki/Comb_space) with a single tooth deleted is connected, but not path-connected

## Disjoint Set Systems

### Graphs & algorithmically determining connectedness

- We will use the integers $1$ to $n$ as the names of vertices, storing each component of the graph as a subset of $[n] = \{1, 2,\ldots, n\}$

- Adding edges one at a time and maintaining the systems of sets representing the components, we find that the graph is connected iff at the end, there is only one set left,
$[n]$

- Formulated as an abstract data type, we have two operations
manipulating the system:

  1. FIND($i$): return the name of the set that contains $i$.

  2. UNION($i,j$): assuming $i$ and $j$ belong to different sets in the
    system, replace the two sets by their union.

::: {.notes}
Back to graphs & considering algorithmic question of connectedness. It is based on maintaining a disjoint set system.
:::

- We need the `find` operation to test whether $i$ and $j$ indeed belong to different sets

- Each successful union operation reduces the number of sets in the system by one

- Starting with $n$ singleton sets, it therefore takes $n-1$ union operations to get to a single set

- Since trees connecting the $n$ vertices can be generated this way, we thus have a proof that every tree with $n$ vertices has $m = n - 1$ edges

- A typical data structure implementation stores each set as a tree
embedded in a linear array, $V[1..n]$

- Each node in the tree is equipped
with a pointer to its *parent*, except for the *root*, which has no
parent

+  Who is the parent of whom isn't important so long as the vertices are connected in a single tree

- We can implement the `find` operation by traversing the tree
upward until the root is reached, reporting the root as the name of the
set

## Disjoint Set System

#### Two trees representing two disjoint sets

```{dot}
//| fig-width: 6
//| fig-height: 4
//| fig-align: center
graph G {
  layout = dot
  node [fixedsize = true, width = .25, height = .25, shape = circle, style = filled, color = "pink"]
  subgraph tree1 {
  6 -- 7, 16;
  7 -- 13, 12;
  12 -- 11, 9;
  11 -- 1;
  1 -- 8;
  9 -- 10;
  }

  subgraph tree2 {
  15 -- 3;
  3 -- 14, 2;
  2 -- 4;
  4 -- 5;
  }
}
```

## Disjoint Set Systems

#### Storing the two trees in a linear array using an arbitrary ordering of the nodes

```{dot}
//| fig-width: 5
//| fig-height: 5
//| fig-align: center
digraph BitConnections {
    rankdir=TB;
    node [fixedsize = true, shape=box, width=0.375, height=0.375, style=filled, fillcolor=lightpink, color=black, fontcolor=black, fixedsize=true];
    nodesep=0.1;
    ranksep=1.5;

    // Nodes
    1 [label="1"];
    2 [label="2"];
    3 [label="3"];
    4 [label="4"];
    5 [label="5"];
    6 [label="6", fillcolor=white];
    7 [label="7"];
    8 [label="8"];
    9 [label="9"];
    10 [label="10"];
    11 [label="11"];
    12 [label="12"];
    13 [label="13"];
    14 [label="14"];
    15 [label="15"];
    16 [label="16", fillcolor=white];

    // Arrange nodes in horizontal order
    { rank=same; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; }

    // Connections
    1 -> 2 [color=transparent];
    2 -> 3 [color=transparent];
    3 -> 4 [color=transparent];
    4 -> 5 [color=transparent];
    5 -> 6 [color=transparent];
    6 -> 7 [color=transparent];
    7 -> 8 [color=transparent];
    8 -> 9 [color=transparent];
    9 -> 10 [color=transparent];
    10 -> 11 [color=transparent];
    11 -> 12 [color=transparent];
    12 -> 13 [color=transparent];
    13 -> 14 [color=transparent];
    14 -> 15 [color=transparent];
    15 -> 16 [color=transparent];

    // Loops and cross-links
    8:n -> 1 [arrowhead = empty, arrowsize = 1];
    1:s -> 11 [arrowhead = empty, arrowsize = 1];
    11:n -> 12 [arrowhead = empty, arrowsize = 1];
    10:n -> 9 [arrowhead = empty, arrowsize = 1];
    9:s -> 12 [arrowhead = empty, arrowsize = 1];
    12:n -> 7 [arrowhead = empty, arrowsize = 1];
    13:n -> 7 [arrowhead = empty, arrowsize = 1];
    7:s -> 6 [arrowhead = empty, arrowsize = 1];
    16:s -> 6 [arrowhead = empty, arrowsize = 1];
    5:n -> 4 [arrowhead = empty, arrowsize = 1];
    4:s -> 2 [arrowhead = empty, arrowsize = 1];
    2:n -> 3 [arrowhead = empty, arrowsize = 1];
    14:s -> 3 [arrowhead = empty, arrowsize = 1];
    3:n -> 15 [arrowhead = empty, arrowsize = 1];
}
```

## Disjoint Set Systems

```         
int FIND(i)
    if V[i].parent â‰  null then return Find(V[i].parent)
                          else return i
    endif
```

- If $i$ is not the root, then we find the root recursively and finally
return it, otherwise, $i$ is returned as the root

- We can then implement the `union` operation by linking one root to the other

```         
void UNION(i, j)
    x = FIND(i); y = FIND(j);
    if x â‰  y then V[x].parent = y endif
```

- After making sure the two sets are different, we assign one root as the
parent of the other

## Improving the running time

- This is not a very efficient method, especially for long paths that may
be traversed repeatedly

- We prevent this by always linking the smaller tree to the larger one

```         
void UNION(i,j)
    x = FIND(i); y = FIND(j);
    if x â‰  y then
      if V[x].size > V[y].size then x â†” y endif;
      V[x].parent = y
    endif
```

- A tree of $k$ nodes cannot have paths longer than $\log_2 k$ edges,
since the size of the subtree grows by at least a factor of two each
time we pass the parent

- To improve the efficiency even more, we compress paths whenever we traverse them
    
- We also assume that roots are identified by pointing to themselves
    
## Improving the running time

```         
int FIND(i)
    if V[i].parent â‰  i then
        return V[i].parent = FIND(V[i].parent)
    endif;
    return i
```

- If $i$ is not the root, then the function recursively finds the root,
makes it the parent of $i$, reports the root, and exits; otherwise, the
function reports $i$ as the root and exits

- In analyzing the algorithm, we are interested in the running-time for
executing a sequence of $m$ union and find operations; finding tight
bounds is a difficult problem

- For $n$ vertices, the running-time is never more than $O(m\alpha (n))$, where $\alpha(n)$ is the slow growing inverse of the [Ackermann function](https://en.wikipedia.org/wiki/Ackermann_function)

- Eventually, $\alpha(n)$ goes to infinity, but to reach even beyond five, we need an astronomically large number of vertices, larger than electrons in the universe

- For practical purposes, the algorithm takes constant average time per operation, but theoretically not true
  
# I.2 Graphs - Curves in the Plane {#sec-CurvesPlane}


# I.3 Graphs - Knots & Links {#sec-KnotsLinks}

# I.4 Graphs - Planar Graphs {#sec-PlanarGraphs}

# II Surfaces

- 2-dimensional Manifolds

- Searching a Triangulation

- Self-intersections

- Surface Simplification

# II.1 Surfaces - 2-dimensional Manifolds

# II.2 Surfaces - Searching a Triangulation

# II.3 Surfaces - Self-intersections

# II.4 Surfaces - Surface Simplification

# III Complexes

- Simplical Complexes

- Convex Set Systems

- Delaunay Complexes

- Alpha Complexes

# III.1 Complexes - Simplical Complexes

# III.2 Complexes - Convex Set Systems

# III.3 Complexes - Delaunay Complexes

# III.4 Complexes - Alpha Complexes